{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\Admin\\\\NodeProjects\\\\LoveTest\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar symbols = require('./lib/symbols');\n\nvar number = require('./lib/number');\n\nvar string = require('./lib/string');\n\nvar object = require('./lib/object');\n\nvar typePredicates = {\n  number: number,\n  string: string,\n  object: object\n};\n\nvar createOw = function createOw() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$validators = _ref.validators,\n      validators = _ref$validators === void 0 ? [] : _ref$validators,\n      _ref$predicates = _ref.predicates,\n      predicates = _ref$predicates === void 0 ? typePredicates : _ref$predicates,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? null : _ref$type;\n\n  var ow = new Proxy(function () {}, {\n    get: function get(obj, key) {\n      if (key === symbols.validate) {\n        return function (value) {\n          var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'argument';\n\n          if (!type) {\n            return new Error('missing required type specifier');\n          }\n\n          for (var i = 0; i < validators.length; ++i) {\n            var validator = validators[i];\n            var result = validator.fn(value);\n\n            if (!result) {\n              if (i === 0) {\n                throw new Error(\"Expected \".concat(label, \" `\").concat(value, \"` to be of type `\").concat(type, \"`, but received type `\").concat(typeof value, \"`\"));\n              } else {\n                throw new Error(\"Expected \".concat(type, \" `\").concat(label, \"` `\").concat(value, \"` failed predicate `\").concat(validator.key, \"`\"));\n              }\n            }\n          }\n        };\n      }\n\n      var predicate = predicates[key];\n\n      if (predicate) {\n        if (typeof predicate === 'function') {\n          validators.push({\n            key: key,\n            fn: predicate\n          });\n          return ow;\n        } else {\n          return createOw({\n            type: key,\n            validators: [{\n              key: key,\n              fn: predicate.validator\n            }],\n            predicates: predicate.predicates\n          });\n        }\n      } else {\n        var fn = predicates[symbols.func] && predicates[symbols.func][key];\n\n        if (fn) {\n          return new Proxy(function () {}, {\n            get: function get() {\n              throw new Error(\"invalid use of functional predicate \\\"\".concat(key, \"\\\"\"));\n            },\n            apply: function apply(obj, thisArg, args) {\n              validators.push({\n                key: key,\n                fn: fn.apply(void 0, _toConsumableArray(args))\n              });\n              return ow;\n            }\n          });\n        } else {\n          if (key === 'default' || key === '__esModule') {\n            return ow;\n          }\n\n          return ow; // throw new Error(`unrecognized predicate \"${key}\"`)\n        }\n      }\n    },\n    apply: function apply(obj, thisArg, args) {\n      if (args.length !== 2 && args.length !== 3) {\n        throw new Error('invalid number of arguments to \"ow\"');\n      } else {\n        args[1][symbols.validate](args[0], args[2]);\n      }\n    }\n  });\n  return ow;\n};\n\nmodule.exports = createOw();","map":null,"metadata":{},"sourceType":"script"}