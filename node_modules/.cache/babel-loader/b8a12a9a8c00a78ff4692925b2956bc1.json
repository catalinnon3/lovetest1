{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport classNames from '../../lib/classNames';\nimport usePlatform from '../../hooks/usePlatform';\nimport getClassName from '../../helpers/getClassName';\nimport Text from '../Typography/Text/Text';\nimport Tappable from '../../components/Tappable/Tappable';\nimport { hasReactNode } from '../../lib/utils';\nexport var MiniInfoCell = function MiniInfoCell(props) {\n  var _classNames;\n\n  var platform = usePlatform();\n\n  var before = props.before,\n      after = props.after,\n      mode = props.mode,\n      multiline = props.multiline,\n      children = props.children,\n      className = props.className,\n      restProps = _objectWithoutProperties(props, [\"before\", \"after\", \"mode\", \"multiline\", \"children\", \"className\"]);\n\n  var Component = restProps.onClick ? Tappable : 'div';\n  return (\n    /*#__PURE__*/\n    React.createElement(Component, _extends({}, restProps, {\n      className: classNames(getClassName('MiniInfoCell', platform), (_classNames = {}, _defineProperty(_classNames, \"MiniInfoCell--md-\".concat(mode), mode !== 'base'), _defineProperty(_classNames, 'MiniInfoCell--mult', multiline), _classNames), className)\n    }),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"MiniInfoCell__icon\"\n    }, before),\n    /*#__PURE__*/\n    React.createElement(Text, {\n      className: \"MiniInfoCell__content\",\n      weight: mode === 'more' ? 'medium' : 'regular'\n    }, children), hasReactNode(after) &&\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"MiniInfoCell__after\"\n    }, after))\n  );\n};\nMiniInfoCell.defaultProps = {\n  mode: 'base'\n};","map":null,"metadata":{},"sourceType":"module"}