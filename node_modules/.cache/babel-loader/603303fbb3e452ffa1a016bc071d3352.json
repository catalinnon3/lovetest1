{"ast":null,"code":"'use strict';\n\nconst symbols = require('./lib/symbols');\n\nconst number = require('./lib/number');\n\nconst string = require('./lib/string');\n\nconst object = require('./lib/object');\n\nconst typePredicates = {\n  number,\n  string,\n  object\n};\n\nconst createOw = ({\n  validators = [],\n  predicates = typePredicates,\n  type = null\n} = {}) => {\n  const ow = new Proxy(function () {}, {\n    get: (obj, key) => {\n      if (key === symbols.validate) {\n        return (value, label = 'argument') => {\n          if (!type) {\n            return new Error('missing required type specifier');\n          }\n\n          for (let i = 0; i < validators.length; ++i) {\n            const validator = validators[i];\n            const result = validator.fn(value);\n\n            if (!result) {\n              if (i === 0) {\n                throw new Error(\"Expected \".concat(label, \" `\").concat(value, \"` to be of type `\").concat(type, \"`, but received type `\").concat(typeof value, \"`\"));\n              } else {\n                throw new Error(\"Expected \".concat(type, \" `\").concat(label, \"` `\").concat(value, \"` failed predicate `\").concat(validator.key, \"`\"));\n              }\n            }\n          }\n        };\n      }\n\n      const predicate = predicates[key];\n\n      if (predicate) {\n        if (typeof predicate === 'function') {\n          validators.push({\n            key,\n            fn: predicate\n          });\n          return ow;\n        } else {\n          return createOw({\n            type: key,\n            validators: [{\n              key,\n              fn: predicate.validator\n            }],\n            predicates: predicate.predicates\n          });\n        }\n      } else {\n        const fn = predicates[symbols.func] && predicates[symbols.func][key];\n\n        if (fn) {\n          return new Proxy(function () {}, {\n            get: () => {\n              throw new Error(\"invalid use of functional predicate \\\"\".concat(key, \"\\\"\"));\n            },\n            apply: (obj, thisArg, args) => {\n              validators.push({\n                key,\n                fn: fn(...args)\n              });\n              return ow;\n            }\n          });\n        } else {\n          if (key === 'default' || key === '__esModule') {\n            return ow;\n          }\n\n          return ow; // throw new Error(`unrecognized predicate \"${key}\"`)\n        }\n      }\n    },\n    apply: (obj, thisArg, args) => {\n      if (args.length !== 2 && args.length !== 3) {\n        throw new Error('invalid number of arguments to \"ow\"');\n      } else {\n        args[1][symbols.validate](args[0], args[2]);\n      }\n    }\n  });\n  return ow;\n};\n\nmodule.exports = createOw();","map":null,"metadata":{},"sourceType":"script"}