import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from 'react';
import classNames from '../../lib/classNames';
import usePlatform from '../../hooks/usePlatform';
import getClassName from '../../helpers/getClassName';
import Text from '../Typography/Text/Text';
import Tappable from '../../components/Tappable/Tappable';
import { hasReactNode } from '../../lib/utils';
export var MiniInfoCell = function MiniInfoCell(props) {
  var _classNames;

  var platform = usePlatform();

  var before = props.before,
      after = props.after,
      mode = props.mode,
      multiline = props.multiline,
      children = props.children,
      className = props.className,
      restProps = _objectWithoutProperties(props, ["before", "after", "mode", "multiline", "children", "className"]);

  var Component = restProps.onClick ? Tappable : 'div';
  return /*#__PURE__*/React.createElement(Component, _extends({}, restProps, {
    className: classNames(getClassName('MiniInfoCell', platform), (_classNames = {}, _defineProperty(_classNames, "MiniInfoCell--md-".concat(mode), mode !== 'base'), _defineProperty(_classNames, 'MiniInfoCell--mult', multiline), _classNames), className)
  }), /*#__PURE__*/React.createElement("div", {
    className: "MiniInfoCell__icon"
  }, before), /*#__PURE__*/React.createElement(Text, {
    className: "MiniInfoCell__content",
    weight: mode === 'more' ? 'medium' : 'regular'
  }, children), hasReactNode(after) && /*#__PURE__*/React.createElement("div", {
    className: "MiniInfoCell__after"
  }, after));
};
MiniInfoCell.defaultProps = {
  mode: 'base'
};
//# sourceMappingURL=MiniInfoCell.js.map